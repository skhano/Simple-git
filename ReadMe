My simple implementation of Git (last project for data structures java course).

Gitlet Commands (simplified):

- init
Usage: java gitlet.Main initDescription: Creates a new gitlet version-control system in the current directory. This system will automatically start with one commit: a commit that contains no files and has the commit message initial commit. It will have a single branch: master, which initially points to this initial commit, and master will be the current branch.Runtime: Should be constant relative to any significant measure.Failure cases: If there is already a gitlet version-control system in the current directory, it should abort. It should NOT overwrite the existing system with a new one. Should print the error message A gitlet version-control system already exists in the current directory.Dangerous?: No
- add
Usage: java gitlet.Main add [file name]Description: Adds a copy of the file as it currently exists to the staging area (see the description of the commit command). For this reason, adding a file is also called staging the file. The staging area should be somewhere in .gitlet. If the current working version of the file is identical to the version in the current commit, do not stage it to be added. If the file had been marked to be removed (see gitlet rm), delete that mark.Runtime: In the worst case, should run in linear time relative to the size of the file being added.Failure cases: If the file does not exist, print the error message File does not exist.Dangerous?: No

- commit
Usage: java gitlet.Main commit [message]Description: Saves a snapshot of certain files in the current commit and staging area so they can be restored at a later time, creating a new commit. The commit is said to be tracking the saved files. By default, each commit's snapshot of files will be exactly the same as its parent commit's snapshot of files; it will keep versions of files exactly as they are, and not update them. A commit will only update files it is tracking that have been staged at the time of commit, in which case the commit will now include the version of the file that was staged instead of the version it got from its parent. A commit will save and start tracking any files that were staged but weren't tracked by its parent. Finally, files tracked in the current commit may be untracked in the new commit as a result of the rm command (below).

- rm
Usage: java gitlet.Main rm [file name]Description: Untrack the file; that is, indicate (somewhere in the .gitlet directory) that it is not to be included in the next commit, even if it is tracked in the current commit (which will become the next commit's parent). Remove the file from the working directory if it was tracked in the current commit. If the file had been staged, then unstage it, but don't remove it from the working directory unless it was tracked in the current commit.Runtime: Should run in constant time relative to any significant measure.Failure cases: If the file is neither staged nor tracked by the head commit, print the error message No reason to remove the file.Dangerous?: Yes (although if you use our utility methods, you will only hurt your repository files, and not all the other files in your directory.)- log
Usage: java gitlet.Main logDescription: Starting at the current head commit, display information about each commit backwards along the commit tree until the initial commit. This set of commit nodes is called the commit's history. For every node in this history, the information it should display is the commit id, the time the commit was made, and the commit message.

- global-log
Usage: java gitlet.Main global-logDescription: Like log, except displays information about all commits ever made. The order of the commits does not matter.Runtime: Linear with respect to the number of commits ever made.Failure cases: NoneDangerous?: NofindUsage: java gitlet.Main find [commit message]Description: Prints out the ids of all commits that have the given commit message, one per line. If there are multiple such commits, it prints the ids out on separate lines. The commit message is a single operand; to indicate a multiword message, put the operand in quotation marks, as for the commit command below.Runtime: Should be linear relative to the number of commits.Failure cases: If no such commit exists, prints the error message Found no commit with that message.Dangerous?: NoDifferences from real git: Doesn't exist in real git. Similar effects can be achieved by grepping the output of log.

- status
Usage: java gitlet.Main statusDescription: Displays what branches currently exist, and marks the current branch with a *. Also displays what files have been staged or marked for untracking. An example of the exact format it should follow is as follows.

- checkoutUsages:java gitlet.Main checkout -- [file name]java gitlet.Main checkout [commit id] -- [file name]java gitlet.Main checkout [branch name]Descriptions:Takes the version of the file as it exists in the head commit, the front of the current branch, and puts it in the working directory, overwriting the version of the file that's already there if there is one. The new version of the file is not staged.Takes the version of the file as it exists in the commit with the given id, and puts it in the working directory, overwriting the version of the file that's already there if there is one. The new version of the file is not staged.Takes all files in the commit at the head of the given branch, and puts them in the working directory, overwriting the versions of the files that are already there if they exist. Also, at the end of this command, the given branch will now be considered the current branch (HEAD). Any files that are tracked in the current branch but are not present in the checked-out branch are deleted. The staging area is cleared, unless the checked-out branch is the current branch (see Failure cases below).Runtimes:Should be linear relative to the size of the file being checked out.Should be linear relative to the size of the file being checked out.Should be linear with respect to the total size of the files in the commit's snapshot. Should be constant with respect to any measure involving number of commits. Should be constant with respect to the number of branches.Failure cases:If the file does not exist in the previous commit, aborts, printing the error message File does not exist in that commit.If no commit with the given id exists, print No commit with that id exists. Else, if the file does not exist in the given commit, print File does not exist in that commit.If no branch with that name exists, print No such branch exists. If that branch is the current branch, print No need to checkout the current branch. If a working file is untracked in the current branch and would be overwritten by the checkout, print There is an untracked file in the way; delete it or add it first. and exit; perform this check before doing anything else.Differences from real git: Real git does not clear the staging area. Also, it won't do a checkout that would overwrite or undo changes (additions or removals) that you have staged.A [commit id] is, as described earlier, a hexadecimal numeral. A convenient feature of real git is that one can abbreviate commits with a unique prefix. 

- branch
Usage: java gitlet.Main branch [branch name]Description: Creates a new branch with the given name, and points it at the current head node. A branch is nothing more than a name for a reference (a SHA-1 identifier) to a commit node. This command does NOT immediately switch to the newly created branch (just as in real git). Before you ever call branch, your code should be running with a default branch called "master".Runtime: Should be constant relative to any significant measure.Failure cases: If a branch with the given name already exists, print the error message A branch with that name already exists.Dangerous?: No

- rm-branch
Usage: java gitlet.Main rm-branch [branch name]Description: Deletes the branch with the given name. This only means to delete the pointer associated with the branch; it does not mean to delete all commits that were created under the branch, or anything like that.Runtime: Should be constant relative to any significant measure.Failure cases: If a branch with the given name does not exist, aborts. Print the error message A branch with that name does not exist. If you try to remove the branch you're currently on, aborts, printing the error message Cannot remove the current branch.Dangerous?: No- reset
Usage: java gitlet.Main reset [commit id]Description: Checks out all the files tracked by the given commit. Removes tracked files that are not present in the given file. Also moves the current branch's head to that commit node. See the intro for an example of what happens to the head pointer after using reset. The [commit id] may be abbreviated as for checkout. The staging area is cleared. The command is essentially checkout of an arbitrary commit that also changes the current branch head.Runtime: Should be linear with respect to the total size of files tracked by the given commit's snapshot. Should be constant with respect to any measure involving number of commits.Failure case: If no commit with the given id exists, print No commit with that id exists. If a working file is untracked in the current branch and would be overwritten by the reset, print There is an untracked file in the way; delete it or add it first.Dangerous?: Yes!Differences from real git: This command is closest to using the --hard option, as in git reset --hard [commit hash].- merge
Usage: java gitlet.Main merge [branch name]Description: Merges files from the given branch into the current branch

- add-remote
Usage: `java gitlet.Main add-remote [remote name] [name of remote directory]/.gitletDescription: Saves the given login information under the given remote name. Attempts to push or pull from the given remote name will then attempt to use this .gitlet directory. By writing, e.g., java gitlet.Main add-remote other ../testing/otherdir/.gitlet you can provide tests of remotes that will work from all locations (on your home machine or within the grading program's software). Always use forward slashes in these commands. Have your program convert all the forward slashes into the path separator character (forward slash on Unix and backslash on Windows). Java helpfully defines the class variable java.io.File.separator as this character.Failure cases: If a remote with the given name already exists, print the error message: A remote with that name already exists. You don't have to check if the user name and server information are legit.Dangerous?: No.- rm-remoteUsage: java gitlet.Main rm-remote [remote name]Description: Remove information associated with the given remote name. The idea here is that if you ever wanted to change a remote that you added, you would have to first remove it and then re-add it.Failure cases: If the given remote name has not been added, print A remote with that name does not exist. If a remote with the given name does not exist, print the error message: A remote with that name does not exist.Dangerous?: No.- pushUsage: java gitlet.Main push [remote name] [remote branch name]Description: Attempts to append the current branch's commits to the end of the given branch at the given remote. Details:This command only works if the remote branch's head is in the history of the current local head, which means that the local branch contains some commits in the future of the remote branch. In this case, append the future commits to the remote branch. Then, the remote should reset to the front of the appended commits (so its head will be the same as the local head). This is called fast-forwarding.If the gitlet system on the remote machine exists but does not have the input branch, then simply add the branch to the remote gitlet.Failure cases: If the remote branch's head is not in the history of the current local head, print the error message Please pull down remote changes before pushing. If the remote .gitlet directory does not exist, print Remote directory not found.Dangerous?: No.- fetchUsage: java gitlet.Main fetch [remote name] [remote branch name]Description: Brings down commits from the remote gitlet into the local gitlet. Basically, this copies all commits and blobs from the given branch in the remote repository (that are not already in the current repository) into a branch named [remote name]/[remote branch name] in the local .gitlet (just as in real git), changing [remote name]/[remote branch name] to point to the head commit (thus copying the contents of the branch from the remote repository to the current one). This branch is created in the local repository if it did not previously exist.Failure cases: If the remote gitlet does not have the given branch name, print the error message That remote does not have that branch. If the remote .gitlet directory does not exist, print Remote directory not found.Dangerous? No- pullUsage: java gitlet.Main pull [remote name] [remote branch name]Description: Fetches branch [remote name]/[remote branch name] as for the fetch command, and then merges that fetch into the current branch.Failure cases: Just the failure cases of fetch and merge together.Dangerous? Yes!I. AcknowledgmentsThanks to Alicia Luengo, Josh Hug, Sarah Kim, Austin Chen, Andrew Huang, Yan Zhao, Matthew Chow, especially Alan Yao, Daniel Nguyen, and Armani Ferrante for providing feedback on this project. Thanks to git for being awesome.This project was largely inspired by this excellent article by Philip Nilsson.This project was created by Joseph Moghadam. Modifications for Fall 2015 by Paul Hilfinger.
     